---
layout:     post
title:      "Welcome to XC Blog"
subtitle:   " \"Hello World, Hello Blog\""
date:       2017-11-02 2:00:00
author:     "XC"
header-img: "img/post-bg-2015.jpg"
tags:
    - Leetcode
---

> “Move on. ”

### No.46 Permutations
* Permutation DFS类型
* https://discuss.leetcode.com/topic/46162/a-general-approach-to-backtracking-questions-in-java-subsets-permutations-combination-sum-palindrome-partioning


### No.48
* zip(*matrix[::-1])
* [~ i ] = [n - 1 - i]
* https://wiki.python.org/moin/BitwiseOperators

```python
class Solution:
    def rotate(self, A):
        A[:] = map(list, zip(*A[::-1]))
```

```python
class Solution:
    def rotate(self, A):
        n = len(A)
        for i in range(n/2):
            for j in range(n-n/2):
                for _ in '123':
                    A[i][j], A[~j][i], i, j = A[~j][i], A[i][j], ~j, ~i
                i = ~j
```

```python
class Solution:
    def rotate(self, A):
        A.reverse()
        for i in range(len(A)):
            for j in range(i):
                A[i][j], A[j][i] = A[j][i], A[i][j]
```


### No.77 Combinations

```python
class Solution(object):
    def combine(self, n, k):
        """
        :type n: int
        :type k: int
        :rtype: List[List[int]]
        """
        if k==1:
            return [[i] for i in range(1,n+1)]
        elif k==n:
            return [[i for i in range(1,n+1)]]
        else:
            res=self.combine(n-1,k)
            part=self.combine(n-1,k-1)
            for i in part:
                i.append(n)
            res+=part
        return res
```


### No.78

* DFS recursively 

```python
def subsets1(self, nums):
    res = []
    self.dfs(sorted(nums), 0, [], res)
    return res


def dfs(self, nums, index, path, res):
    res.append(path)
    for i in xrange(index, len(nums)):
        self.dfs(nums, i+1, path+[nums[i]], res)
```

        
* Bit Manipulation    

```python
def subsets2(self, nums):
    res = []
    nums.sort()
    for i in xrange(1 << len(nums)):
        tmp = []
        for j in xrange(len(nums)):
            if i & (1 << j):  # if i >> j & 1:
                tmp.append(nums[j])
        res.append(tmp)
    return res
```

    
* Iteratively

```python
def subsets(self, nums):
    res = [[]]
    for num in sorted(nums):
        res += [item+[num] for item in res]
    return res
```


### No.79 Word Search

```python
class Solution(object):
    def exist(self, board, word):
        """
        :type board: List[List[str]]
        :type word: str
        :rtype: bool
        """
        m, n = len(board), len(board[0])

        count_board = {}
        for i in range(m):
            for j in range(n):
                if board[i][j] not in count_board:
                    count_board[board[i][j]] = 1
                else:
                    count_board[board[i][j]] += 1

        count_word = {}
        for c in word:
            if c not in count_word:
                count_word[c] = 1
            else:
                count_word[c] += 1

        for c in count_word:
            if c not in count_board or count_word[c] > count_board[c]:
                return False

        def dfs(x, y, p):
            val = board[x][y]
            if val != word[p]:
                return False
            
            if p == len(word)-1:
                return True

            board[x][y] = '#'

            for dx, dy in ((-1,0), (0,1), (0,-1), (1,0)):
                nx, ny = x + dx, y + dy
                if nx < 0 or nx >= m or ny < 0 or ny >= n:
                    continue
                    
                if dfs(nx, ny, p+1):
                    return True
            board[x][y] = val
            return False

        for i in range(m):
            for j in range(n):
                if dfs(i, j, 0):
                    return True

        return False
```


### No. 86 Partition List

```python
def partition(self, head, x):
    h1 = l1 = ListNode(0)
    h2 = l2 = ListNode(0)
    while head:
        if head.val < x:
            l1.next = head
            l1 = l1.next
        else:
            l2.next = head
            l2 = l2.next
        head = head.next
    l2.next = None
    l1.next = h2.next
    return h1.next
```
Suppose the list is 2->1, if you don't set l2.next = None, there will be a loop: 1->2 and 2 connects to 1 again


### No.89 Gray Code

```java
class Solution {
    public List<Integer> grayCode(int n) {
        List<Integer> res = new LinkedList<>();
        for (int i =0; i < 1 << n; i++) res.add(i^i>>1);
        return res;
    }
}
```


### [92. Reverse Linked List II](https://leetcode.com/problems/reverse-linked-list-ii/description/)
Reverse a linked list from position m to n. Do it in-place and in one-pass.
For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,
return 1->4->3->2->5->NULL.
```python
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    def reverseBetween(self, head, m, n):
        """
        :type head: ListNode
        :type m: int
        :type n: int
        :rtype: ListNode
        """
        
        if head is None:
            return None
        
        dummy = ListNode(0)
        dummy.next = head
        
        pre = dummy 
        
        for i in range(m-1):
            pre = pre.next
        
        start = pre.next
        then = start.next 
        
        for i in range(n - m):
            start.next = then.next
            then.next = pre.next
            pre.next = then
            then = start.next
        return dummy.next
    
    
<https://discuss.leetcode.com/topic/8976/simple-java-solution-with-clear-explanation>
```
```java
 public class ListNode {
    int val;
    ListNode next;
    ListNode(int x) { val = x; }
 }

class Solution {
    public ListNode reverseBetween(ListNode head, int m, int n) {
        if(head == null) return null;
        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode pre = dummy;
        for(int i=0;i<m-1;i++) pre = pre.next;
        ListNode start = pre.next;
        ListNode then = start.next;
        
        for(int i=0;i<n-m;i++){
            start.next = then.next;
            then.next = pre.next;
            pre.next = then;
            then = start.next;
        }
        return dummy.next;
    }
}
```


### [139. Word Break](https://leetcode.com/problems/word-break/description/)
```java
public class Solution {
    public class TrieNode {
        boolean isWord;
        TrieNode[] c;
        
        public TrieNode(){
            isWord = false;
            c = new TrieNode[128];
        }
    }
    
    public void addWord(TrieNode t, String w) {
        for (int i = 0; i < w.length(); i++) {
            int j = (int)w.charAt(i); 
            if (t.c[j] == null) t.c[j] = new TrieNode();
            t = t.c[j];
        }
        t.isWord = true;
    }
    
    public boolean wordBreak(String s, Set<String> wordDict) {
        TrieNode t = new TrieNode(), cur;
        for (String i : wordDict) addWord(t, i);
        char[] str = s.toCharArray();
        int len = str.length;
        boolean[] f = new boolean[len + 1];
        f[len] = true;
        
        for (int i = len - 1; i >= 0; i--) {
            //System.out.println(str[i]);
            cur = t;
            for (int j = i; cur != null && j < len ; j++) {
                cur = cur.c[(int)str[j]];
                if (cur != null && cur.isWord && f[j + 1]) {
                    f[i] = true;
                    break;
                }
            }
        }
        return f[0];
    }
}
```


### [151. Reverse Words in a String](https://leetcode.com/problems/reverse-words-in-a-string/description/)
```python
class Solution(object):
    def reverseWords(self, s):
        """
        :type s: str
        :rtype: str
        """
        s = s.strip()
        n = len(s)
        if n == 0:
            return s
        s = list(s[::-1])
        ss = []
        res = ''
        i = 0
        while True:
            try:
                while s[i] == ' ':
                    i += 1
            except IndexError:
                break
            if res:
                res += ' '
            tmp = ''
            try:
                while s[i]!= ' ':
                    tmp += s[i]
                    i += 1
                res += tmp[::-1]
            except IndexError:
                res += tmp[::-1]
                break
        return res
```


### [153. Find Minimum in Rotated Sorted Array](https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/description/)
```python
class Solution(object):
    def findMin(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        lo = 0
        hi = len(nums)-1
        
        while lo < hi:
            if nums[lo] < nums[hi]:
                return nums[lo]
            mid = lo+(hi-lo)/2
            # print lo, hi, mid
            if nums[mid] > nums[hi]:
                lo = mid+1
            else:
                hi = mid
                
        return nums[lo]
```


### [160. Intersection of Two Linked Lists](https://leetcode.com/problems/intersection-of-two-linked-lists/description/)
```python
class Solution(object):
    def getIntersectionNode(self, headA, headB):
        """
        :type head1, head1: ListNode
        :rtype: ListNode
        """
        if headA is None or headB is None:
            return None

        pa = headA
        pb = headB

        while pa is not pb:
            if pa is None:
                pa = headB
            else:
                pa = pa.next
            if pb is None:
                pb = headA
            else:
                pb = pb.next

        return pa
```


### No.206 Reverse Linked List  

```python
class Solution(object):
    def reverseList(self, head):
        """
        :type head: ListNode
        :rtype: ListNode
        """
        if (not head) or (not head.next):
            return head
        prev = None
        cur = head
        nex = head.next
        cur.next = prev
        while nex:
            prev = cur
            cur = nex
            nex = nex.next
            cur.next = prev
        return cur
```


### [219. Contains Duplicate II](https://leetcode.com/problems/contains-duplicate-ii/description/)


```python
class Solution(object):
    def containsNearbyDuplicate(self, nums, k):
        """
        :type nums: List[int]
        :type k: int
        :rtype: bool
        """
        if not nums or len(set(nums))==len(nums):
            return False
        
        if len(nums)<=k:
            if len(set(nums))<len(nums):
                return True
        
        for i in range(len(nums)-k):
            if len(set(nums[i:i+k+1]))<len(nums[i:i+k+1]):
                return True
        return False
```


### [223. Rectangle Area](https://leetcode.com/problems/rectangle-area/description/)

```python
def computeArea(self, A, B, C, D, E, F, G, H):
    overlap = max(min(C,G)-max(A,E), 0)*max(min(D,H)-max(B,F), 0)
    return (A-C)*(B-D) + (E-G)*(F-H) - overlap
```


### [238. Product of Array Except Self](https://leetcode.com/problems/product-of-array-except-self/description/)

```python
class Solution:
    # @param {integer[]} nums
    # @return {integer[]}
    def productExceptSelf(self, nums):
        p = 1
        n = len(nums)
        output = []
        for i in range(0,n):
            output.append(p)
            p = p * nums[i]
        p = 1
        for i in range(n-1,-1,-1):
            output[i] = output[i] * p
            p = p * nums[i]
        return output
```


### No.258 Add Digits

```python
class Solution(object):
    def addDigits(self, num):
        """
        :type num: int
        :rtype: int
        """
        if num>9:
            num=num%9
            if num == 0:
                num=9
        return num
```


### [300. Longest Increasing Subsequence](https://leetcode.com/problems/longest-increasing-subsequence/description/)

```java
 public int lengthOfLIS(int[] nums) 
	{
		// Base case
		if(nums.length <= 1) 
			return nums.length;

		// This will be our array to track longest sequence length
		int T[] = new int[nums.length];

		// Fill each position with value 1 in the array
		for(int i=0; i < nums.length; i++)
			T[i] = 1;


		// Mark one pointer at i. For each i, start from j=0.
		for(int i=1; i < nums.length; i++)
		{
			for(int j=0; j < i; j++)
			{
				// It means next number contributes to increasing sequence.
				if(nums[j] < nums[i])
				{
					// But increase the value only if it results in a larger value of the sequence than T[i]
					// It is possible that T[i] already has larger value from some previous j'th iteration
					if(T[j] + 1 > T[i])
					{
						T[i] = T[j] + 1;
					}
				}
			}
		}

		// Find the maximum length from the array that we just generated 
		int longest = 0;
		for(int i=0; i < T.length; i++)
			longest = Math.max(longest, T[i]);

		return longest;
	}
```

```
def lengthOfLIS(self, nums):
    tails = [0] * len(nums)
    size = 0
    for x in nums:
        i, j = 0, size
        while i != j:
            m = (i + j) / 2
            if tails[m] < x:
                i = m + 1
            else:
                j = m
        tails[i] = x
        size = max(i + 1, size)
    return size
```


### [No.371 Sum of Two Integers](https://leetcode.com/problems/sum-of-two-integers/description/)

```python
from math import log
class Solution(object):
    def getSum(self, a, b):
        """
        :type a: int
        :type b: int
        :rtype: int
        """
        Max = 0x7FFFFFFF
        Min = 0x80000000
        mask = 0xFFFFFFFF
        while b!=0:
            a, b = (a^b)&mask, ((a&b)<<1)&mask
        return a if a<=Max else ~(a^mask)
```
https://discuss.leetcode.com/topic/51999/python-solution-with-no-completely-bit-manipulation-guaranteed/2


### [384. Shuffle an Array](https://leetcode.com/problems/shuffle-an-array/description/)

```python
import random

class Solution(object):

    def __init__(self, nums):
        """
        :type nums: List[int]
        :type size: int
        """
        self._array = nums

    def reset(self):
        """
        Resets the array to its original configuration and return it.
        :rtype: List[int]
        """
        return self._array
        
    def shuffle(self):
        """
        Returns a random shuffling of the array.
        :rtype: List[int]
        """
        shuffled_array = self._array[:] 
        random.shuffle(shuffled_array)
        return shuffled_array
```
copy


### [No.388 Longest Absolute File Path](https://leetcode.com/problems/longest-absolute-file-path/description/)

```python
def lengthLongestPath(self, input):
    maxlen = 0
    pathlen = {0: 0}
    for line in input.splitlines():
        name = line.lstrip('\t')
        depth = len(line) - len(name)
        if '.' in name:
            maxlen = max(maxlen, pathlen[depth] + len(name))
        else:
            pathlen[depth + 1] = pathlen[depth] + len(name) + 1
    return maxlen
```
### No.458 Poor Pigs
With 2 pigs, poison killing in 15 minutes, and having 60 minutes, we can find the poison in up to 25 buckets in the following way. Arrange the buckets in a 5×5 square:

 
```
1  2  3  4  5
6  7  8  9 10
11 12 13 14 15
16 17 18 19 20
21 22 23 24 25
```

Now use one pig to find the row (make it drink from buckets 1, 2, 3, 4, 5, wait 15 minutes, make it drink from buckets 6, 7, 8, 9, 10, wait 15 minutes, etc). Use the second pig to find the column (make it drink 1, 6, 11, 16, 21, then 2, 7, 12, 17, 22, etc).

Having 60 minutes and tests taking 15 minutes means we can run four tests. If the row pig dies in the third test, the poison is in the third row. If the column pig doesn't die at all, the poison is in the fifth column (this is why we can cover five rows/columns even though we can only run four tests).

With 3 pigs, we can similarly use a 5×5×5 cube instead of a 5×5 square and again use one pig to determine the coordinate of one dimension (one pig drinks layers from top to bottom, one drinks layers from left to right, one drinks layers from front to back). So 3 pigs can solve up to 125 buckets.

In general, we can solve up to (⌊minutesToTest / minutesToDie⌋ + 1)pigs buckets this way, so just find the smallest sufficient number of pigs for example like this:


```python
def poorPigs(self, buckets, minutesToDie, minutesToTest):
    pigs = 0
    while (minutesToTest / minutesToDie + 1) ** pigs < buckets:
        pigs += 1
    return pigs
```


### No.516 Longest Palindromic Subsequence


```python
int n = s.length();
int[] dp = new int[n];
for (int j = 0; j < n; ++j) {
    dp[j] = 1;
    int prev = 0;
    for (int i = j - 1; i >= 0; --i) {
        int tmp = dp[i];
        if (s.charAt(i) == s.charAt(j)) {
            dp[i] = 2 + prev;
        } else {
            dp[i] = Math.max(dp[i + 1], dp[i]);
        }
        prev = tmp;
    }
}
return dp[0];
```


### No.593 Valid Square

```python
class Solution(object):
    def validSquare(self, p1, p2, p3, p4):
        points = [p1, p2, p3, p4]
        
        dists = collections.Counter()
        for i in range(len(points)):
            for j in range(i+1, len(points)):
                dists[self.getDistance(points[i], points[j])] += 1
        
        return len(dists.values())==2 and 4 in dists.values() and 2 in dists.values()
        
    def getDistance(self, p1, p2):
        return (p1[0] - p2[0])**2 + (p1[1] - p2[1])**2
```














